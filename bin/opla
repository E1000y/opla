#!/usr/bin/env node
const chalk = require("chalk");
const figlet = require("figlet");
const fs = require("fs-extra");
const pkg = require("../package.json");
const program = require("commander");
const { prompt } = require("inquirer");

const CONFIG_FILE = "config/default.json";
const DESCRIPTION = `Management tool for ${pkg.description}`;

program
  .version(pkg.version)
  .description(DESCRIPTION)
  .option("--non-interactive", "Do not prompt and use default settings");

program
  .command("init")
  .alias("i")
  .description("Initialize the project and create the configuration file")
  .action(async () => {
    const defaults = {
      databaseType: "mysql",
      databaseHost: "127.0.0.1",
      databaseName: "opla_dev",
      databaseUser: "root",
      databasePass: "",
      apiEndpoint: "/api",
      authEndpoint: "/auth",
    };
    const questions = [
      {
        type: "list",
        name: "databaseType",
        message: "Database engine",
        choices: ["mysql"],
        default: [defaults.databaseType],
      },
      {
        type: "input",
        name: "databaseHost",
        message: "Database host",
        default: defaults.databaseHost,
      },
      {
        type: "input",
        name: "databaseName",
        message: "Database name",
        default: defaults.databaseName,
      },
      {
        type: "input",
        name: "databaseUser",
        message: "Database user",
        default: defaults.databaseUser,
      },
      {
        type: "password",
        name: "databasePass",
        message: "Database password",
        default: defaults.databasePass,
      },
      {
        type: "input",
        name: "apiEndpoint",
        message: "Main API endpoint",
        default: defaults.apiEndpoint,
      },
      {
        type: "input",
        name: "authEndpoint",
        message: "Auth API endpoint",
        default: defaults.authEndpoint,
      },
    ];

    try {
      let answers;
      if (program.nonInteractive) {
        answers = defaults;
      } else {
        answers = await prompt(questions);
      }

      // create the configuration
      const config = {
        name: "Opla.ai",
        version: pkg.version,
        global: {
          database: {
            datatype: answers.databaseType,
            host: answers.databaseHost,
            name: answers.databaseName,
            user: answers.databaseUser,
            password: answers.databasePass,
            charset: "utf8mb4",
            version: "2",
          },
          api: {
            endpoint: answers.apiEndpoint,
            version: "1",
            port: 8081,
          },
          botSite: {
            url: "http://127.0.0.1:8085/?b=",
          },
        },
        auth: {
          database: {
            parent: "global",
            name: "auth",
          },
          api: {
            endpoint: answers.authEndpoint,
          },
        },
        messenger: {
          database: {
            parent: "global",
            name: "messenger",
          },
        },
        users: {
          database: {
            parent: "global",
            name: "users",
          },
        },
        bots: {
          database: {
            parent: "global",
            name: "bots",
          },
        },
        webhooks: {
          database: {
            parent: "global",
            name: "webhooks",
          },
        },
        middlewares: {
          database: {
            parent: "global",
            name: "middlewares",
          },
        },
        parameters: {
          database: {
            parent: "global",
            name: "parameters",
          },
        },
      };

      await fs.writeJson(CONFIG_FILE, config, { spaces: 2 });

      console.log(chalk.green("Project successfully configured!"));
    } catch (err) {
      const errorMessage = err.message;
      console.error(chalk.red(`An error has occured: ${errorMessage}`));
    }
  });

console.log(chalk.yellow(figlet.textSync("Opla CE", { horizontalLayout: "full" })));
console.log(`${DESCRIPTION}\n`);

program.parse(process.argv);

if (!program.args.length) {
  program.help();
}
